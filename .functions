function printpath() {
	echo "$PATH" \
		| tr ':' '\n'
}

function pretty-printenv() {
	# while loop adds a blank line between entries
	printenv \
		| while read line
			do printf "%s\n\n" "$line"
			done \
		| sed 's/=/:\n\t/'
}

function winname() {
	local wintitle="$@"
	printf "\e]2;$wintitle\a"
}

function volume() {
	local vol="$1"
	amixer set Master "$vol%"
}

# print to stderr
function cerr() {
	echo "$@" 1>&2
}

function signal-done() {
        local message=

        if [[ $# -gt 0 ]]
        then
                message="$@"
        else # user didn't put an argument
                message="Task has been completed."
        fi

        notify-send --urgency=low -i /usr/share/icons/gnome/32x32/emblems/emblem-default.png "$message"
}

function nth() {
	local NTH=$1

	local END=$((NTH+1))
	while read $(eval echo COL{1..$END})
	do
		eval echo \$COL${NTH}
	done
}

function gen-password() {
        local length=${1:-8}

        < /dev/urandom tr -dc [:graph:] \
                | head --bytes="$length"
        echo
}

function nav() {
	local dir="$1"
	if (($# > 1))
	then
		shift
		local lsopts="$@"
	fi

	cd $dir \
		&& ls --color=auto $lsopts
}

# up -> cd ..
# up 3 -> cd ../../..
# [/path/you/are/on]: up you -> [/path/you]:
function up() {
	if [[ $# = 0 ]]
	then
		cd ..
		return
	fi

	local input="$1"
	local number='^[0-9]+$'

	if [[ "$input" =~ $number ]]
	then
		local count="$input"
		until [[ "$count" = 0 ]]
		do
			cd ..
			let count-=1
		done
	else
		local dir="$(pwd)"
		while :
		do
			if [[ "$(basename $dir)" = "$input" ]]
			then
				break
			fi
			dir="$(dirname $dir)"
			if [[ "$dir" = "/" ]]
			then
				cerr "Directory '$input' not found"
				return 1
			fi
		done
		cd "$dir"
	fi
}

function pushdir() {
	local args="$@"
	pushd "$args" >/dev/null
	dirs -v
}

function popdir() {
	local args="$@"
	popd "$args" >/dev/null
	dirs -v
}

function bkup() {
	local file="$1"
	cp "$file" "${file}.old"
}

function restor() {
	local file="$1"
	cp "$file" "${file%.*}"
}

function mkd() {
	local dir="$@"
	mkdir -p "$dir" \
		&& cd "$dir"
}

# interactive mv
function imv() {
	local src dst
	for src in "$@"
	do
		[[ -e "$src" ]] || { cerr "$src does not exist"; continue }
		dst="$src"
		vared dst
		[[ "$src" != "$dst" ]] && mkdir -p "$dst":h && mv -n "$src" "$dst"
	done
}

function anon() {
	PROMPT="%{$fg[red]%}Anon%{$reset_color%} @ %{$fg[blue]%}%m%{$reset_color%}" # user and host
	PROMPT+=" in %{$fg_bold[magenta]%}%~%{$reset_color%}" # current directory
	PROMPT+=$'\n'
	PROMPT+="%# "
}

# better than pgrep
function ps-grep() {
	local search_string="$@"

	ps aux \
		| grep "$search_string" \
		| grep -v grep
}

# poor man's daemon process
function daemonize() {
	local commands="$@"

	# (... &) will double fork (background in a separate shell)
	(
		# close stdin, stdout, and stderr
		exec 0>&-
		exec 1>&-
		exec 2>&-
		# background process
		nohup "$commands" &
	)
}

function lu() {
	ls -Al \
		| sed '1d' \
		| awk 'BEGIN { format = "%-20s\t%s\n"
			printf format, "file", "user:group"
			printf format, "----", "----------" }
			{
				filename = $9
				if (length(filename) > 20)
				{
					filename = sprintf("%s...", substr(filename, 1, 17))
				}
				printf "%-20s\t%s:%s\n", filename, $3, $4
			}'
}

# colored cat
function dog() {
	local file
	for file in "$@"
	do
		pygmentize -g -O style=colorful "$file"
	done
}

# quickview colored documents in less
function qv() {
	local file
	for file in "$@"
	do
		pygmentize -g -O style=colorful "$file"
	done | less -R -N
}

# colored man pages
function man() {
	local pages="$@"
	# mb: blinking mode
	# md: double-bright mode - red
	# me: exit all appearance modes
	# se: leave standout mode
	# so: enter standout mode - yellow
	# ue: leave underline mode
	# us: enter underline mode - blue
	env LESS_TERMCAP_mb=$(printf '\e[01;32m') \
		LESS_TERMCAP_md=$(printf '\e[01;38;5;167m') \
		LESS_TERMCAP_me=$(printf '\e[0m') \
		LESS_TERMCAP_se=$(printf '\e[0m') \
		LESS_TERMCAP_so=$(printf '\e[01;38;5;227m') \
		LESS_TERMCAP_ue=$(printf '\e[0m') \
		LESS_TERMCAP_us=$(printf '\e[04;38;5;109m') \
		man "$pages"
}

function extract() {
	local file="$1"

	if [ -f "$file" ]; then
		case "$file" in
			*.tar.bz2)      tar -x -j -v -f "$file" ;;
			*.tar.gz)       tar -x -z -v -f "$file" ;;
			*.bz2)          bunzip2 "$file" ;;
			*.tar)          tar -x -v -f "$file" ;;
			*.zip)          unzip "$file" ;;
			*)              cerr "$file cannot be extracted with $FUNCNAME()"; return 2 ;;
		esac
	else
		cerr "$file is not a valid file"
		return 1
	fi
}

# quickedit of config files (includes reloads)
function conf() {
	function print_usage() {
		cat << EOF
conf: usage: conf [OPTIONS] parameter

possible uses:
	vim
	emacs
	sbcl
	bash (.bashrc)
	bashp (.bash_profile)
	zsh (.zshrc)
	zshp (.zprofile)
	functions
	autocomp
	ssh
	i3wm (i3)
	hlwm (herbstluft)
	xinit
	xbk (xbindkeys)
	compton

options:
	-h      help
	-n      do not source file after editing
	-v      print version and exit
EOF
	}

	# source file after editing?
	local source_flag=true
	local parameter=

	while [[ $# -gt 0 ]]
	do
		local arg="$1"
		shift
		case "$arg" in
			-n)     source_flag=false ;;
			-h)     print_usage; return 1 ;;
			-v)     echo "version 0.2.0"; return 0 ;;
			*)      parameter="$arg" ;;
		esac
	done

	case "$parameter" in
		vim)		vim ~/.vimrc ;;
		emacs)		vim ~/.emacs ;;
		sbcl)       vim ~/.sbclrc ;;
		bash)       vim ~/.bashrc && $source_flag && source ~/.bashrc ;;
		bashp)      vim ~/.bash_profile && $source_flag && source ~/.bash_profile ;;
		zsh)		vim ~/.zshrc && $source_flag && source ~/.zshrc ;;
		zshp)       vim ~/.zprofile && $source_flag && source ~/.zprofile ;;
		functions)	vim ~/.functions && $source_flag && source ~/.functions ;;
		autocomp)	vim ~/.autocomp && $source_flag && source ~/.autocomp ;;
		conf)		vim ~/.functions && $source_flag && source ~/.functions ;;
		ssh)        vim ~/.ssh/config ;;
		i3wm)		vim ~/.i3/config ;;
		hlwm)		vim ~/.config/herbstluftwm/autostart ;;
		dzen2)		vim ~/.config/herbstluftwm/panel.sh ;;
		xinit)		vim ~/.xinitrc ;;
		xbk)		vim ~/.xbindkeysrc.scm ;;
		compton)	vim ~/.config/compton.conf ;;
		*)          cerr "Incorrect parameter."; print_usage; return 1 ;;
	esac
}

function Solon() {
	local message="$@"

	curl -X POST \
		-d "{ \
			\"bot_id\":\"9b6cc79025993de9caffc44aaa\", \
			\"text\":\"$message\" \
		}" \
		-H 'Content-Type: application/json' \
		https://api.groupme.com/v3/bots/post
}
